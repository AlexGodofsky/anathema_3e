import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.tasks.StopExecutionException

ext.dependenciesDir = new File(buildDir, 'dependencies')
ext.versionString = "${version_major}.${version_minor}.${version_revision}"
ext.testDependencies = ['junit:junit:4.+', 'org.mockito:mockito-core:1.9.0']

apply plugin: 'idea'

idea {
  project {
    languageLevel = '1.6'
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.0'
}

boolean isDataPlugin(project) {
  project.name.startsWith('Blog') || project.name.startsWith('Book') || project.name.startsWith('Box')
}

def os = operatingSystem()
String operatingSystem() {
  def os = System.getProperty('os.name').toLowerCase()
  def result = ""
  if( os.indexOf("win") >= 0   ) result = "win"
  if( os.indexOf("mac") >= 0   ) result = "mac"
  if( os.indexOf("nix") >= 0           //  unix
  ||  os.indexOf("nux") >= 0   ) result = "linux"
  if( os.indexOf("sunos") >= 0 ) result = "solaris"
  return result
}

subprojects {
  apply plugin: 'java'
  sourceCompatibility = 1.6
  
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  
  repositories {
    mavenCentral()
    maven {
      url 'https://github.com/anathema/anathema-thirdparty/raw/master/releases/'
    }
    maven {
      url 'https://github.com/anathema/anathema-thirdparty/raw/master/snapshots/'
    }
  }

  sourceSets.test.java.srcDir 'test'
  
  if (!isDataPlugin(project)) {
    sourceSets.main.java.srcDir 'src'
  }
  else {
    sourceSets.main.resources.srcDir 'resources'
  }

  task collectTransitiveDependencies() << {
    copy {
      from configurations.compile.findAll { File dependency -> (dependency.absolutePath.contains('cache')) }
      into parent.ext.dependenciesDir
    }
  }

  task testJar(type: Jar, dependsOn: testClasses) {
    baseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
  }
}

configurations {
  launch4j
  nsis
}

dependencies {
  launch4j files(
            "./Development_Distribution/Windows/Binaries/launch4j/launch4j.jar",
            "./Development_Distribution/Windows/Binaries/launch4j/xstream.jar",
  )
  nsis files("./Development_Distribution/Windows/Binaries/NSIS/nsisant-1.3.jar")
}


def projectLibrary(String project) {
  return zipTree("$project/build/libs/${project}.jar")
}

task createModule << {
  if (!project.hasProperty('moduleName')) {
    throw new StopExecutionException( "\n Please specify your new module name like so: gradlew createModule -PmoduleName=MyNewModuleNameHere\n")
  }
  else {
    if (new File(moduleName).exists()) {
      throw new StopExecutionException("Module $moduleName already exists.")
    }
    else {
      mkdir moduleName
      mkdir "$moduleName/src"
      mkdir "$moduleName/resources"
      mkdir "$moduleName/test"
      new File("$moduleName/build.gradle").withWriter { out ->
        out.println "dependencies {\n//  Insert your dependencies here like so:\n//  compile project(':Character_Equipment')\n//  compile project(':Character_Equipment_Impl')\n}"
      }
    }
  }
}

// Windows Build
task buildWindowsExecutable << {
  def binDir = "Development_Distribution/Windows/Binaries/launch4j/"
  if( os.equals( "win"     ) ) binDir += "bin_win"
  if( os.equals( "mac"     ) ) binDir += "bin_mac"
  if( os.equals( "linux"   ) ) binDir += "bin_linux"
  if( os.equals( "solaris" ) ) binDir += "bin_solaris"

  mkdir("./build/launcher")
  def exeVersion = "${versionString}.0"
  def versionText = "${versionString} \"$version_name\""
  ant.taskdef(name: 'launch4j', classname: 'net.sf.launch4j.ant.Launch4jTask', classpath: configurations.launch4j.asPath)
  ant.launch4j(bindir: binDir, configFile: 'Development_Distribution/Windows/launch4j.xml', outfile: './build/launcher/anathema.exe', fileVersion: "$exeVersion", productVersion: "$exeVersion", txtFileVersion: "$versionText", txtProductVersion: "$versionText")
}

task buildWindowsInstaller << {
  def nsis_path = "Development_Distribution/Windows/Binaries/NSIS/"
  if( os.equals( "win"     ) ) nsis_path += "bin_win"
  if( os.equals( "mac"     ) ) nsis_path += "bin_mac"

  ant.taskdef(name: "nsis", classname: "com.danielreese.nsisant.Task", classpath: configurations.nsis.asPath)    
  ant.nsis(script: "Development_Distribution/Windows/NSIS/anathema.nsi", path: "${nsis_path}") {
    define(name: "RELEASE_VERSION", value: "${versionString}")
    define(name: "VERSION", value: "${versionString}.0")
  }
}

buildWindowsInstaller.dependsOn buildWindowsExecutable

// OSX Build
def appName = "Anathema"
def appDir = "${appName}.app"
def appPath = "${buildDir}/${appName}"
def macArchiveName = "${appName}_Mac_v${versionString}.zip"

task cleanupMacBuildDir(type: Delete) {
  delete "${buildDir}/${appDir}"
}

task prepareMacBuildDir << {
  new File("${buildDir}/${appDir}/Contents/MacOS").mkdirs()
  new File("${buildDir}/${appDir}/Contents/Resources/Java").mkdirs()
}

task buildMacApp(type: Copy) {
  destinationDir buildDir
  into("${appDir}/Contents/") {
    from("Development_Distribution/Mac/")
    include 'Info.plist'
    filter(ReplaceTokens, tokens: ["version-major": "${version_major}".toString(), "version-minor": "${version_minor}".toString(), "version-revision": "${version_revision}".toString()])
  }
  into("${appName}/${appDir}/Contents/MacOS/") {
    from("Development_Distribution/Mac")
    include 'JavaApplicationStub'
    fileMode = 0755
  }
  into("${appDir}/Contents/Resources") {
    from("Development_Distribution/Mac/")
    include 'sungear.icns'
  }
  into("${appDir}/Contents/Resources/Java") {
    from 'Anathema/build/libs'
  }
  into("${appDir}/Contents/Resources/Java/lib") {
    from("${buildDir}/dependencies/");
    from("${buildDir}/plugins/");
  }
}

task buildMacZip(type: Zip) {
  archiveName = macArchiveName
  destinationDir = buildDir
  from("${buildDir}/${appDir}") {
    into "${appName}/${appDir}"
    exclude "${appName}/${appDir}/Contents/MacOS/JavaApplicationStub"
  }
  into("${appName}/${appDir}/Contents/MacOS/") {
    from("Development_Distribution/Mac")
    include 'JavaApplicationStub'
    fileMode = 0755
  }
  from("Development_Documentation/Distribution/English") {
    include 'license.txt'
    include 'versions.md'
    rename 'versions.md', 'release_notes.txt'
    into "$appName"
  }
}

prepareMacBuildDir.dependsOn cleanupMacBuildDir
buildMacApp.dependsOn prepareMacBuildDir
buildMacZip.dependsOn buildMacApp

// Zip Release
task buildZip(type: Zip) {
  archiveName = "Anathema_v${versionString}.zip"
  destinationDir = buildDir
  from 'Anathema/build/libs'
  into('lib') {
    from('build/dependencies')
    from('build/plugins')
  }
  from("Development_Distribution/Linux") {
    include 'anathema.sh'
    filter( FixCrLfFilter.class,
            eol:FixCrLfFilter.CrLf.newInstance("lf") )
  }
  from("build/launcher") {
    include 'anathema.exe'
  }
  from("Development_Documentation/Distribution/English") {
    include 'license.txt'
    include 'versions.md'
    rename 'versions.md', 'release_notes.txt'
  }
}

buildZip.dependsOn buildWindowsExecutable

[buildZip, buildWindowsInstaller, buildMacZip].each {
  it.dependsOn ':Anathema:jar'
}

// All Releases
task release dependsOn buildZip, buildMacZip, buildWindowsInstaller<<{
}

// Plugins
apply from: 'plugins.gradle'

tasks.each {
  def isPluginTask = it.name.matches('build.*Plugin')
  if (isPluginTask) {
    buildZip.dependsOn it
    buildWindowsInstaller.dependsOn it  // should these depend on the executable and app instead of the installers?
    buildMacZip.dependsOn it
    buildWindowsExecutable.dependsOn it
    buildMacApp.dependsOn it
  }
}


