dependenciesDir = new File(buildDir, 'dependencies')

subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'

  sourceCompatibility = 1.6

  if (!isDataPlugin(project)) {
    sourceSets {
      main {
        java {
          srcDir 'src'
        }
      }
    }
  }
  else {
    sourceSets {
      main {
        resources {
          srcDir 'resources'
        }
      }
    }
  }

  task collectTransitiveDependencies() << {
    copy {
      from configurations.compile.findAll { File dependency -> dependency.absolutePath.contains('Thirdparty') }
      into dependenciesDir
    }
  }
}

version_major = 2
version_minor = 0
version_revision = 1

def projectLibrary(String project) {
  return zipTree("$project/build/libs/${project}.jar")
}

def buildPlugin = {name, projects, task ->
  task.archiveName = "${name}.jar"
  task.destinationDir = new File(buildDir, "plugins")
  projects.each {
    task.dependsOn(":$it:assemble")
    task.dependsOn(":$it:collectTransitiveDependencies")
    task.from projectLibrary(it)
  }
}

task buildCorePlugin(type: Jar) {
  def name = 'core'
  def projects = ['Lib_Thirdparty', 'Lib', 'Lib_Gui', 'Lib_Workflow', 'Platform', 'Platform_Database', 'Platform_SvgTree']
  buildPlugin name, projects, delegate
}

task buildNamegeneratorPlugin(type: Jar) {
  def name = 'namegenerator'
  def projects = ['Namegenerator']
  buildPlugin name, projects, delegate
}

task buildCharacterPlugin(type: Jar) {
  def name = 'character'
  def projects = ["Character_Generic", "Character_Generic_Impl", "Character_Generic_Framework", "Character_Reporting", "Character_Library", "Character_Craft", "Character_Linguistics", "Charm_Tree", "Character_Intimacies", "Character_Equipment", "Character_Equipment_Impl", "Character_MeritsFlaws", "Character_Mutations", "Character_Thaumaturgy", "Character_Main", "Character_Main_Impl"]
  buildPlugin name, projects, delegate
}

task buildZip(type: Zip) {
  archiveName = "Anathema_v${version_major}.${version_minor}.${version_revision}.zip"
  destinationDir = buildDir
  from 'Anathema/build/libs'
  into('lib') {
    from('build/dependencies')
  }
  into('plugins') {
    from('build/plugins')
  }
  from("/Development_Documentation/Distribution/English") {
    include '*.txt'
  }
  into('doc/spanish') {
    from("/Development_Documentation/Distribution/Spanish") {
      include '*.txt'
    }
  }
  into('doc/italian') {
    from("/Development_Documentation/Distribution/Italian") {
      include '*.txt'
    }
  }
}

buildZip.dependsOn ':Anathema:buildBootloader', ':Anathema:collectDependencies'

tasks.each {
  if (it.name.matches('build.*Plugin')) {
    buildZip.dependsOn it
  }
}

boolean isDataPlugin(project) {
  project.name.startsWith('Blog') || project.name.startsWith('Book') || project.name.startsWith('Box')
}