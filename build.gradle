dependenciesDir = new File(buildDir, 'dependencies')

subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'

  sourceCompatibility = 1.6

  if (!isDataPlugin(project)) {
    sourceSets {
      main {
        java {
          srcDir 'src'
        }
      }
    }
  }
  else {
    sourceSets {
      main {
        resources {
          srcDir 'resources'
        }
      }
    }
  }

  task collectTransitiveDependencies() << {
    copy {
      from configurations.compile.findAll { File dependency -> dependency.absolutePath.contains('Thirdparty') }
      into dependenciesDir
    }
  }
}

version_major = 2
version_minor = 0
version_revision = 1


task buildCorePlugin(type: Jar) {
  archiveName = "core.jar"
  destinationDir = new File(buildDir, "plugins")
  from zipTree('Lib_Thirdparty/build/libs/Lib_Thirdparty.jar')
  from zipTree('Lib/build/libs/Lib.jar')
  from zipTree('Lib_Gui/build/libs/Lib_Gui.jar')
  from zipTree('Lib_Workflow/build/libs/Lib_Workflow.jar')
  from zipTree('Platform/build/libs/Platform.jar')
  from zipTree('Platform_Database/build/libs/Platform_Database.jar')
  from zipTree('Platform_SvgTree/build/libs/Platform_SvgTree.jar')
}

task buildZip(type: Zip) {
  archiveName = "Anathema_v${version_major}.${version_minor}.${version_revision}.zip"
  destinationDir = buildDir
  from 'Anathema/build/libs'
  into('lib') {
    from('build/dependencies')
  }
  into('plugins') {
    from('build/plugins')
  }
  from("/Development_Documentation/Distribution/English") {
    include '*.txt'
  }
  into('doc/spanish') {
    from("/Development_Documentation/Distribution/Spanish") {
      include '*.txt'
    }
  }
  into('doc/italian') {
    from("/Development_Documentation/Distribution/Italian") {
      include '*.txt'
    }
  }
}

buildCorePlugin.dependsOn ':Platform_SvgTree:build', ':Platform_SvgTree:collectTransitiveDependencies', ':Platform_Database:collectTransitiveDependencies'
buildZip.dependsOn ':Anathema:buildBootloader', ':Anathema:collectDependencies', 'buildCorePlugin'

boolean isDataPlugin(project) {
  project.name.startsWith('Blog') || project.name.startsWith('Book') || project.name.startsWith('Box')
}