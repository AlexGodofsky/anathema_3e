<?xml version="1.0"?>
<project name="Mac_Distribution_Targets">
	
    <import file="../Common/common_distribution_targets.xml" />
	
    <property name="app.name" value="Anathema" />
	
	<target name="Build Mac Application" if="isUnix">
		<!-- Make the app shell -->
	    <property name="app.dir" value="${app.name}.app" />
		
		<delete dir="${app.dir}" quiet="true" />
		<mkdir dir="${app.dir}"/>
		<mkdir dir="${app.dir}/Contents"/>
		<mkdir dir="${app.dir}/Contents/MacOS"/>
		<mkdir dir="${app.dir}/Contents/Resources"/>
		<mkdir dir="${app.dir}/Contents/Resources/Java"/>
		
		<!-- Add a symlink to the user's copy of Apple's Java application stub. -->
		<symlink link="${app.dir}/Contents/MacOS/JavaApplicationStub"
			     resource="/System/Library/Frameworks/JavaVM.framework/Versions/Current/Resources/MacOS/JavaApplicationStub" />
				
		<!-- Copy files and directories where we need them -->
		<copy file="Mac/Info.plist"
	          tofile="${app.dir}/Contents/Info.plist"
	          overwrite="true">
			<filterchain>
				<replacetokens>
					<token key="version-major" value="${version.major}" />
					<token key="version-minor" value="${version.minor}" />
					<token key="version-revision" value="${version.revision}" />
				</replacetokens>
			</filterchain>
	    </copy>
		<copy file="Mac/sungear.icns" todir="${app.dir}/Contents/Resources"/>
		<copy todir="${app.dir}/Contents/Resources/Java">
			<fileset dir="${build.dir}" includes="anathema.jar" />
			<fileset dir="${files.dir}" includes="**/*.txt" />
		</copy>
		
		<!-- Copy whole directories. -->
		<copy todir="${app.dir}/Contents/Resources/Java/lib">
		   	<fileset dir="${libraries.dir}"/>
		</copy>
		<copy todir="${app.dir}/Contents/Resources/Java/plugins">
		   	<fileset dir="${plugins.dir}"/>
		</copy>
		
		<!-- The Mac command to "bless" the directory into an app bundle. Will not execute on other platforms. -->
		<!-- However, it shouldn't be necessary, strictly speaking. -->
		<exec executable="/Developer/Tools/SetFile" os="Mac OS X" failonerror="true">
		    <arg value="-a" />
			<arg value="B" />
			<arg file="${app.dir}"/>
		</exec>
	</target>
	
	<target name="Build DMG" depends="Build Mac Application" if="isUnix">
		<condition property="isOSX">
			<os name="Mac OS X" />
		</condition>
		<condition property="isUnixNotMac">
			<and>
				<os family="unix" />
				<not>
					<os family="mac" />
				</not>
			</and>
		</condition>
		<property name="mountdir" value="/tmp" />
		
		<antcall target="Build DMG Mac" />
		<antcall target="Build DMG Unix" />
	</target>

	<target name="Build DMG Unix" if="isUnixNotMac">
	    <property name="app.dir" value="${app.name}.app" />
	    <property name="dmgname" value="${app.name}_v${version.major}.${version.minor}.${version.revision}.dmg" />
		<property name="padding_size" value="250" />
		
		<!-- Make a .dmg image to receive the application. -->
		<!-- This can be automated as follows, but should not run without copying the application into the image. -->
		<!--
			<exec executable="sh" failonerror="true" outputproperty="app.size">
				<arg value="-c" />
				<arg value='du -sk ${app.dir} | cut -f1' />
			</exec>
			<echo message="Application directory size: ${app.size}" />
			<exec executable="expr" failonerror="true" outputproperty="image_size">
				<arg value="${app.size}" />
				<arg value="+" />
				<arg value="${padding_size}" />
			</exec>
			<exec executable="dd" failonerror="true">
				<arg value="if=/dev/zero" />
				<arg value="of=${dmgname}" />
				<arg value="bs=1024" />
				<arg value="count=${image_size}" />
			</exec>
			<exec executable="mkfs.hfsplus" failonerror="true">
				<arg value="-v" />
				<arg value="${app.name}" />
				<arg file="${dmgname}" />
			</exec>
		-->
		
		<!-- Update the DS_Store file as required. -->
		<copy file="Mac/DS_Store"
	          tofile="Mac/DS_Store.tmp"
	          overwrite="true">
			<filterchain>
				<replacetokens>
					<token key="version-major" value="${version.major}" />
					<token key="version-minor" value="${version.minor}" />
					<token key="version-revision" value="${version.revision}" />
				</replacetokens>
			</filterchain>
	    </copy>
		
		<!-- Copy the application into the .dmg image. -->
		<!-- This appears to be impossible to automate, as it requires mounting the .dmg - which can only be done as root. -->
		<!--
		Using a shell script:
			1) sudo Mac/finishDMG.sh ${app.dir} ${dmgname} ${mountdir}/${app.name}
		Manually:
			1) app.size = `du -sk ${app.dir} | cut -f1`
			2) image_size = `expr ${app.size} + ${padding_size}
			3) dd if=/dev/zero of=${dmgname} bs=1024 count=$image_size
			4) mkfs.hfsplus -v ${app.name} ${dmgname} 
			5) mkdir ${mountdir}/${app.name}
			6) sudo mount -o loop -t hfsplus ${dmgname} ${mountdir}/${app.name}
			7) sudo cp -a ${app.dir} ${mountdir}/${app.name}/
			8) sudo umount ${mountdir}/${app.name}
			9) rmdir ${mountdir}/${app.name}
		NOTE: Even this isn't quite good enough, and manual templating is still necessary. I'm working on it.
		      - Eric Astor
		-->
		<echo message="MUST RUN: sudo Mac/finishDMG.sh '${app.dir}' '${dmgname}' '${app.name} ${version.major}.${version.minor}.${version.revision}' '${mountdir}/${app.name}'" />
	</target>
		
	<target name="Build DMG Mac" if="isOSX"
		description="Create a DMG package for MacOSX (only works on MacOSX)">
		<!-- Create a DMG - This only works on MacOSX (requires hdiutil) -->
		<!-- Source: http://www.rkuntz.org/pmwiki.php?n=Code.AntDiskImage -->
		<!-- NOTE: Not yet fully tested. -->
	    
		<property name="app.dir" value="${app.name}.app" />
		<property name="dmg.name" value="${app.name}_v${version.major}.${version.minor}.${version.revision}.dmg" />
		<property name="volume.name" value="${app.name} ${version.major}.${version.minor}.${version.revision}" />

	    <!-- Delete any previously created DMG -->
	    <delete file="${dmg.name}" quiet="yes" />

	    <!-- Create a temporary Disk Image -->
	    <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
	      <arg value="create"/>
	      <arg value="-srcfolder"/>
	      <arg value="${app.dir}"/>
	      <arg value="-volname"/>
	      <arg value="${volume.name}"/>
	      <arg value="-ov"/>
	      <arg value="${app.name}-tmp.dmg"/>
	      <arg value="-format"/>
	      <arg value="UDRW"/>
	    </exec>

	    <!-- Attach the temporary image -->
	    <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
	      <arg value="attach"/>
	      <arg value="${app.name}-tmp.dmg"/>
	      <arg value="-mountroot"/>
	      <arg value="${mountdir}/"/>
	    </exec>

	    <!-- Copy the background, the volume icon and DS_Store files -->
	    <copy file="Mac/background.tiff"
	          tofile="${mountdir}/${volume.name}/.background.tiff"
	          overwrite="true"/>
	    <copy file="Mac/VolumeIcon.icns"
	          tofile="${mountdir}/${volume.name}/.VolumeIcon.icns"
	          overwrite="true"/>
	    <copy file="Mac/DS_Store"
	          tofile="${mountdir}/${volume.name}/.DS_Store"
	          overwrite="true">
			<filterchain>
				<replacetokens>
					<token key="version-major" value="${version.major}" />
					<token key="version-minor" value="${version.minor}" />
					<token key="version-revision" value="${version.revision}" />
				</replacetokens>
			</filterchain>
	    </copy>

	    <!-- Indicate that we want a custom icon -->
	    <exec executable="/Developer/Tools/SetFile" os="Mac OS X">
	      <arg value="-a"/>
	      <arg value="C"/>
	      <arg value="${mountdir}/${volume.name}"/>
	    </exec>
		
		<!-- Put the license into the root of the image -->
		<copy file="${app.name}.app/Contents/Resources/Java/license.txt"
              tofile="${mountdir}/${volume.name}/License.txt"
		      overwrite="true"/>

	    <!-- Add a symbolic link to the Applications directory -->
	    <symlink link="${mountdir}/${volume.name}" resource="/Applications"/>

	    <!-- Detach the temporary image -->
	    <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
	      <arg value="detach"/>
	      <arg value="${mountdir}/${volume.name}"/>
	    </exec>

	    <!-- Compress it to a new image -->
	    <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
	      <arg value="convert"/>
	      <arg value="${app.name}-tmp.dmg"/>
	      <arg value="-format"/>
	      <arg value="UDZO"/>
	      <arg value="-o"/>
	      <arg value="${dmg.name}"/>
	    </exec>

	    <!-- Delete the temporary image -->
	    <delete file="${app.name}-tmp.dmg" quiet="yes" />
	</target>
</project>