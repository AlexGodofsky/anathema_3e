archivesBaseName= 'anathema'
propertiesDir = new File(buildDir, 'properties')
libraryDir = 'lib'

jar {
  manifest {
    attributes(
      'Built-By': System.getProperty("user.name"),
      'Main-Class': 'net.sf.anathema.AnathemaBootLoader',
      'SplashScreen-Image': 'icons/core/AnathemaSplashNew.png',
    )
  }
  from(propertiesDir) {
    include '**/*'
  }
  doFirst {
    manifest.attributes(['Class-Path': createClassPath()])
  }
}

private String createClassPath() {
    StringBuilder path = new StringBuilder()
    dependenciesDir.eachFile{ File jar ->
        path.append("$libraryDir/${jar.name} ")
    }
    return path.toString().trim()
}

task buildBootloader << {
}

dependencies {
  compile files(
    "../Thirdparty/Jakarta/commons-logging-api.jar",
    "../Thirdparty/Plugin/jpf.jar",
    "../Thirdparty/Plugin/jpf-boot.jar",
    )
  compile project(':Platform')
  compile project(':Lib')
  testCompile group: 'junit', name: 'junit', version: '4.+'
  testCompile project(path: ':Lib', configuration: 'tests')
  testCompile project(path: ':Platform', configuration: 'tests')
  //For development, all projects need to be on the classpath at runtime.
  project.parent.subprojects.each {
      if (isNotSelfOrThirdparty(it)){
        runtime project(":${it.name}")
      }
  }
}

private boolean isNotSelfOrThirdparty(project) {
    return project.name != "Anathema" && project.name != "Thirdparty"
}

task collectDependencies(type: Copy) {
  from configurations.compile.findAll { File dependency -> dependency.absolutePath.contains('Thirdparty') }
  into dependenciesDir
}

buildBootloader.dependsOn build
project.parent.subprojects.each {
    if (isNotSelfOrThirdparty(it)){
      jar.dependsOn ":${it.name}:collectTransitiveDependencies"
    }
}


sourceSets {
  main {
    resources {
      srcDir 'resources'
    }
  }
  test {
    java {
      srcDir 'test'
    }
  }
}
